//AUTHOR: Miguel Nillas
//COURSE: CPT187
//PURPOSE: 
//STARTDATE: 2/17/2022
package edu.cpt187.nillas.exercise6;
import java.util.Scanner;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.io.FileWriter;
public class UserAccounts 
{
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private final int MAXIMUM_RECORDS = 50;
	private String[] userNames = new String[MAXIMUM_RECORDS];
	private String[] passwords = new String[MAXIMUM_RECORDS];
	private String masterFileName = "";
	private int recordCount = 0;
	private int searchedIndex = 0;
	
	//constructor
	UserAccounts(String borrowedFileName)
	{
		masterFileName = borrowedFileName;
	}
	
	//setters
	
	//void method to setUserAccountArrays
	public void setUserAccountArrays()
	{	
		
		try
		{
			
			Scanner infile = new Scanner(new FileInputStream(masterFileName));
			recordCount = RESET_VALUE;
			while(infile.hasNext() == true && recordCount < MAXIMUM_RECORDS)
			{
				userNames[recordCount]= infile.next();
				passwords[recordCount] = infile.next();
				recordCount++;
			}
			infile.close();
		}//end of try
		catch(IOException ex)
		{
			recordCount = NOT_FOUND;
		}//end of catch
		
	}//end of setUserAccountArrays
	
	public void setSearchedIndex(String borrowedUserName)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
	}
	
	//void method to setSearchedIndex
	public void setSearchedIndex(String borrowedUserName, String borrowedPassword)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
		
		if(searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword)==false)
		{
			searchedIndex = NOT_FOUND;
		}
	}//end of setSearchedIndex
	
	//void method to setWriteOneRecord
	public void setWriteOneRecord(String borrowedUserName, String borrowedPassword)
	{
		try
		{
			PrintWriter filePW = new PrintWriter(new FileWriter(masterFileName, true));
			
			filePW.printf("%n%s\t%s\t", borrowedUserName, borrowedPassword);
			recordCount++;
			filePW.close();
		}
		catch(IOException ex)
		{
			recordCount = NOT_FOUND;
		}
	}//end of setWriteOneRecord
	
	
	//getters
	
	//this method will getSeqSearch
	public int getSeqSearch(String borrowedBorrowedUserName)
	{
		int localIndex = 0;
		int localFound = NOT_FOUND;
		while(localIndex < recordCount)
		{
			if(borrowedBorrowedUserName.equalsIgnoreCase(userNames[localIndex]))
			{
				localFound = localIndex;
				localIndex = recordCount;
			}//end of if
			else
			{
				localIndex++;
			}//end of else
			
		}//end of while
		return localFound;
	}//end of vr method getSeqSearch
	
	//this method will getPasswordMatch
	public boolean getPasswordMatch(String borrowedBorrowedPassword)
	{
		return borrowedBorrowedPassword.equals(passwords[searchedIndex]);
	}//end of vr method getPasswordMatch

	//this method will getFileName
	public String getFileName()
	{
		return masterFileName;
	}//end of vr method getFileName
	
	//this method will getMaximumRecords
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;
	}//end of vr method getMaximumRecords
	
	//this method will getRecordCount
	public int getRecordCount()
	{
		return recordCount;
	}//end of vr method getRecordCount
	
	//this method will getSearchedIndex
	public int getSearchedIndex()
	{
		return searchedIndex;
	}//end of vr method getSearchedIndex
}
